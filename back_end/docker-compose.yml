services:
  postgres:
    image: postgres:15
    container_name: my-postgres

#  keycloak:
#    image: quay.io/keycloak/keycloak:21.1.1
#    container_name: keycloak
#    environment:
      # Utilisateurs admin Keycloak
#      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USER}
#      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASS}
#      # Si tu veux stocker les donn√©es Keycloak dans PostgreSQL plut√¥t que H2
#      KC_DB: postgres
#      KC_DB_URL_HOST: postgres
#      KC_DB_URL_PORT: "5432"
#      KC_DB_URL_DATABASE: mydb
#      KC_DB_USERNAME: postgres
#      KC_DB_PASSWORD: postgres
#    command:
#      - start-dev
#      - --import-realm           # si tu as un export de realm √† importer
#    ports:
#      - "8080:8080"
#    depends_on:
#      - postgres

  app:
    build: .
    container_name: my-app
    ports:
      - "3000:3000"
    depends_on:
      - postgres
#      - keycloak
    env_file:
      - .env
    environment:
      DATABASE_URL: ${DATABASE_URL}
      DIRECT_URL:  ${DATABASE_URL}
      # Pointage vers le service Keycloak interne
#      KEYCLOAK_BASE_URL: http://keycloak:8080/
#      KEYCLOAK_REALM:     ${KEYCLOAK_REALM}
#      KEYCLOAK_ADMIN_USER: ${KEYCLOAK_ADMIN_USER}
#      KEYCLOAK_ADMIN_PASS: ${KEYCLOAK_ADMIN_PASS}
#      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
    volumes:
      - .:/app
    working_dir: /app
    command: >
      sh -c "
        echo '‚è≥ Waiting for Postgres‚Ä¶' &&
        until nc -z postgres 5432; do sleep 1; done &&
        echo '‚è≥ Waiting for Keycloak‚Ä¶' &&
        until nc -z keycloak 8080; do sleep 1; done &&
        echo '‚úÖ Services pr√™ts, migrations‚Ä¶' &&
        npx prisma migrate dev --name init &&
        echo 'üöÄ D√©marrage app en dev' &&
        npm run dev
      "

  frontend:
    build:
      context: ../front_end/chapter_one
      dockerfile: Dockerfile
    container_name: my-frontend
    depends_on:
      - app
    environment:
      NEXT_PUBLIC_API_URL: http://app:3000
    ports:
      - "3001:3000"

volumes:
  pgdata:
